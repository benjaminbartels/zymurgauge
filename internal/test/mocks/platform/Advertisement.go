// Code generated by mockery v2.9.4. DO NOT EDIT.

package platform

import (
	ble "github.com/go-ble/ble"

	mock "github.com/stretchr/testify/mock"
)

// Advertisement is an autogenerated mock type for the Advertisement type
type Advertisement struct {
	mock.Mock
}

// Addr provides a mock function with given fields:
func (_m *Advertisement) Addr() ble.Addr {
	ret := _m.Called()

	var r0 ble.Addr
	if rf, ok := ret.Get(0).(func() ble.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ble.Addr)
		}
	}

	return r0
}

// Connectable provides a mock function with given fields:
func (_m *Advertisement) Connectable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LocalName provides a mock function with given fields:
func (_m *Advertisement) LocalName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ManufacturerData provides a mock function with given fields:
func (_m *Advertisement) ManufacturerData() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// OverflowService provides a mock function with given fields:
func (_m *Advertisement) OverflowService() []ble.UUID {
	ret := _m.Called()

	var r0 []ble.UUID
	if rf, ok := ret.Get(0).(func() []ble.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ble.UUID)
		}
	}

	return r0
}

// RSSI provides a mock function with given fields:
func (_m *Advertisement) RSSI() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ServiceData provides a mock function with given fields:
func (_m *Advertisement) ServiceData() []ble.ServiceData {
	ret := _m.Called()

	var r0 []ble.ServiceData
	if rf, ok := ret.Get(0).(func() []ble.ServiceData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ble.ServiceData)
		}
	}

	return r0
}

// Services provides a mock function with given fields:
func (_m *Advertisement) Services() []ble.UUID {
	ret := _m.Called()

	var r0 []ble.UUID
	if rf, ok := ret.Get(0).(func() []ble.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ble.UUID)
		}
	}

	return r0
}

// SolicitedService provides a mock function with given fields:
func (_m *Advertisement) SolicitedService() []ble.UUID {
	ret := _m.Called()

	var r0 []ble.UUID
	if rf, ok := ret.Get(0).(func() []ble.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ble.UUID)
		}
	}

	return r0
}

// TxPowerLevel provides a mock function with given fields:
func (_m *Advertisement) TxPowerLevel() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
