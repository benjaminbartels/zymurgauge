// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	device "github.com/benjaminbartels/zymurgauge/internal/device"
	mock "github.com/stretchr/testify/mock"

	tilt "github.com/benjaminbartels/zymurgauge/internal/device/tilt"
)

// Configurator is an autogenerated mock type for the Configurator type
type Configurator struct {
	mock.Mock
}

// CreateDs18b20 provides a mock function with given fields: thermometerID
func (_m *Configurator) CreateDs18b20(thermometerID string) (device.Thermometer, error) {
	ret := _m.Called(thermometerID)

	var r0 device.Thermometer
	if rf, ok := ret.Get(0).(func(string) device.Thermometer); ok {
		r0 = rf(thermometerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(device.Thermometer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(thermometerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGPIOActuator provides a mock function with given fields: pin
func (_m *Configurator) CreateGPIOActuator(pin string) (device.Actuator, error) {
	ret := _m.Called(pin)

	var r0 device.Actuator
	if rf, ok := ret.Get(0).(func(string) device.Actuator); ok {
		r0 = rf(pin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(device.Actuator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTilt provides a mock function with given fields: color
func (_m *Configurator) CreateTilt(color tilt.Color) (device.ThermometerAndHydrometer, error) {
	ret := _m.Called(color)

	var r0 device.ThermometerAndHydrometer
	if rf, ok := ret.Get(0).(func(tilt.Color) device.ThermometerAndHydrometer); ok {
		r0 = rf(color)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(device.ThermometerAndHydrometer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tilt.Color) error); ok {
		r1 = rf(color)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
