// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// Actuator is an autogenerated mock type for the Actuator type
type Actuator struct {
	mock.Mock
}

// Off provides a mock function with given fields:
func (_m *Actuator) Off() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// On provides a mock function with given fields:
func (_m *Actuator) On() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PWMOn provides a mock function with given fields: duty
func (_m *Actuator) PWMOn(duty float64) error {
	ret := _m.Called(duty)

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(duty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActuator creates a new instance of Actuator. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewActuator(t testing.TB) *Actuator {
	mock := &Actuator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
